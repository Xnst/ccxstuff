#! /usr/bin/env python3

import sys

# writes a file with the surfaces defined in salome as element sets
# from surfaces
#
# only works for TET-elements. 3node surface and 4-node volume elements
#
# just type surfSet <filename>.inp which is the unv2ccx converted file
# should return <filename>S.inp


def saveD(line):
    '''
    splits the line into first number and the following number as a list
    typically for having element numer together with the list of nodes that form 
    the element
    
    returns elnem, list of nodes - all integers
    '''
    eli = line[:-1].split(',')
    elnum = int(eli[0].strip())
    uteli = []
    i = 0
    for item in eli[1:]:
        i += 1
        if len(item.strip()) > 0:
            uteli.append(int(item.strip()))

    return elnum, uteli


def esetty(line):
    neli = line[:-1].split(',')
    utli = []
    for item in neli:
        if len(item.strip()) > 0:
            utli.append(int(item.strip()))

    return utli


def nodadd(ndict, line):
    '''
    returns the updated ndict with format {node: [el1, el2, ...]
    '''
    eli = line[:-1].split(',')
    elnum = int(eli[0].strip())
    for item in eli[1:]:
        if len(item.strip()) > 0:
            nq = int(item.strip())
            if nq in ndict.keys():
                ndict[nq].append(elnum)
            else:
                ndict[nq] = [elnum]
    return ndict


#
# --- main ---
#
if len(sys.argv) == 2:

    infil = sys.argv[1]
    utfil = infil.split('.')[0] + 'S.inp'
    fin = open(infil, 'r')
    fut = open(utfil, 'w')

    first = True
    el2Dsave = False
    el3Dsave = False
    essave = False
    #
    # ---
    # --- el2D = A dict with the 2D-elements in the file with their nodes
    # --- el3D = A dict with the 3D-elements in the file with their nodes
    # --- esdict = A dict with the element sets and their containing elements
    # --- ndic = A dict with nudnum and the elements they participate in
    el2D = {}
    el3D = {}
    esdict = {}
    ndict = {}
    #
    for line in fin:
        if "*" in line:
            # resets the reading of elements and nodes
            first = True
            el2Dsave = False
            el3Dsave = False
            essave = False
        if '*ELEMENT' in line:
            # initiate reading of elements
            # destinguish between 2D surface elemnets and 3D solid ones
            first = True
            if "CPS3" in line:
                el2Dsave = True
                el3Dsave = False
            if "C3D4" in line:
                el2Dsave = False
                el3Dsave = True

            elsave = True
            essave = False

        if '*ELSET' in line:
            # initiaates reading of ELSETs
            elis = line.split('=')
            esetName = elis[-1][:-1]
            esdict[esetName] = []
            print(esetName)
            first = True
            el2Dsave = False
            el3Dsave = False
            essave = True

        if el2Dsave:
            # saves the 2D elements to the  dict
            if first:
                first = False
            else:
                qw = saveD(line)
                el2D[qw[0]] = qw[1]
        if el3Dsave:
            # saves the 3D elements to the  dict
            if first:
                first = False
            else:
                qw = saveD(line)
                el3D[qw[0]] = qw[1]
                ndict = nodadd(ndict, line)
        if essave:
            # saves the elements that is contained in the elset to the  dict
            if first:
                first = False
            else:
                esdict[esetName].extend(esetty(line))

    # face number of the element define the surface. The relevant face
    # is related to the nodes in that face
    surnam = {3: 'S1', 4: 'S2', 6: 'S3', 5: 'S4'}
    # surnam = {7: 'S1', 11: 'S2', 14: 'S3', 13: 'S4'}
    for key in esdict.keys():
        fut.write('*SURFACE, NAME={}\n'.format(key))
        for elly in esdict[key]:
            nodes = el2D[elly]
            # reduce the amount of 3D elements to scan for every new surface face
            # i.e. make a subset of el3D  =>  el3Dred
            el3Dli = []
            for nw in nodes:
                el3Dli.extend(ndict[nw])
            el3Dred = {}
            for ered in list(set(el3Dli)):
                el3Dred[ered] = el3D[ered]
            #
            # --- go through the list of elements and see which one contain
            # --- the face
            #
            e3 = []
            for el in el3Dred.keys():
                if nodes[0] in el3Dred[el]:
                    e3.append(el)
            e3a = []
            for ew in e3:
                if nodes[1] in el3Dred[ew]:
                    e3a.append(ew)
            e3b = []
            for ew in e3a:
                if nodes[2] in el3Dred[ew]:
                    e3b.append(ew)
            
            nlist3 = el3Dred[e3b[0]]

            # check numbering of nodes to see which face is used
            sval = 0
            for i in nodes:
                sval += nlist3.index(i)

            utstr = '{}, {}\n'.format(e3b[0], surnam[sval])
            fut.write(utstr)
            
    fut.close()
    fin.close()

else:
    print('Usage:')
    print('surfSet <infile> ')
    print('')
    
